#SECRETS NAME : AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_REGION
name: Node.js CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
env:  #SET ENVIROMENT VARIABLES
    APPLICATION_NAME: 'github-nodejs-app'
    DEPLOYMENT_GROUP: 'DG1'
    BUCKET_NAME: 'githubaction-nodejs-app'
    FILE_NAME: 'app'
jobs:
  buildAndTest:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app #CHANGE WORKING DIRECTORY
    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: app/package-lock.json
    - run: npm install -g mocha
    - run: npm install
    #CREATING ZIP FILE
    - name: zip creation
      uses: thedoctor0/zip-release@main
      with:
        type: 'zip'
        filename: 'app.zip'
        directory: app/
        exclusions: '*.git* /*node_modules/* .editorconfig'
    - run: ls
    - name: 'Task 1: Connect to AWS '
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    - name: 'Task 2: Upload  to S3 bucket'
      run: aws s3 cp ${{env.FILE_NAME}}.zip s3://${{env.BUCKET_NAME}}
      #TESTING
    - name: 'Testing '
      run : echo 'testing'
#     - run : npm run test
  deploy: 
     needs: buildAndTest
     runs-on: ubuntu-latest
     steps:
     - name: Configure AWS Credentials
       uses: aws-actions/configure-aws-credentials@v1
       with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: ${{ secrets.AWS_REGION }}
     - name: Deploy to AWS
       run: 
         aws deploy create-deployment --application-name ${{env.APPLICATION_NAME}} --deployment-group-name ${{env.DEPLOYMENT_GROUP}} --s3-location bucket=${{env.BUCKET_NAME}},key=${{env.FILE_NAME}}.zip,bundleType=zip
 
